INTRODUCTION:
QUICK SORT:
Quicksort is a Divide and Conquer algorithm. It picks an element as a pivot and partitions the given
array around the picked pivot. There are many different versions of quicksort that pick pivot in
different ways.
 Always pick the first element as a pivot.  Always pick the last element as a pivot.  Pick a random
element as a pivot.  Pick median as the pivot.
ALGORITHM FOR QUICK SORT:
QUICKSORT (array A, start, end) {
if (start < end) {
p = partition(A, start, end)
QUICKSORT (A, start, p - 1)
QUICKSORT (A, p + 1, end)
}
}
PROGRAM FOR QUICK SORT USING DETERMINISTIC VARIANT:
CODE :












class QuickSort
{
int partition(int arr[], int low, int high)
{
int pivot = arr[high];
int i = (low-1); // index of smaller element
for (int j=low; j<high; j++)
{
// If current element is smaller than or equal to pivot
if (arr[j] <= pivot)
{
i++;
// swap arr[i] and arr[j]
int temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
}
}
int temp = arr[i+1];
arr[i+1] = arr[high];
arr[high] = temp;
return i+1;
}
void sort(int arr[], int low, int high)
{
if (low < high)
{
//pi is partitioning index, arr[pi] is now at right place
int pi = partition(arr, low, high);
// Recursively sort elements before partition and after partition
sort(arr, low, pi-1);
sort(arr, pi+1, high);
}
}
static void printArray(int arr[])
{
int n = arr.length;
for (int i=0; i<n; ++i)
System.out.print(arr[i]+" ");
System.out.println();
}
// Driver program
public static void main(String args[])
{
int arr[] = {10, 7, 8, 9, 1, 5};
int n = arr.length;
QuickSort ob = new QuickSort();
ob.sort(arr, 0, n-1);
System.out.println("sorted array");
printArray(arr);
}
}
OUTPUT :
sorted array
1 5 7 8 9 10